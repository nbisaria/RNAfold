%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.2.5
%%CreationDate: Thu Nov  1 16:46:31 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d0 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CGUGUGCUCUUCCGAUCUCUaacaUAAGGAGUUUAUAUGGAAACCCUUAugAAAUgcgcACAUGAGGAUCACCCAUGUgcUACGACAGGUUCAGAGUUCUACA\
) def
/coor [
[85.38203430 380.30465698]
[91.42837524 364.46551514]
[91.42837524 349.46551514]
[91.42837524 334.46551514]
[81.82123566 319.86575317]
[90.93991852 303.95773315]
[90.48687744 288.96456909]
[90.03382874 273.97140503]
[89.58078766 258.97824097]
[89.12773895 243.98509216]
[80.94484711 237.53005981]
[77.68470764 227.39750671]
[80.69052124 216.95571899]
[89.17811584 209.82176208]
[89.63115692 194.82859802]
[90.08420563 179.83544922]
[90.53724670 164.84228516]
[90.99029541 149.84913635]
[73.07465363 142.90846252]
[59.03231049 129.79528809]
[50.88329315 112.39595795]
[49.79986954 93.21343231]
[55.93788910 75.00717926]
[44.13013840 65.75639343]
[32.32238388 56.50561523]
[20.51463318 47.25482941]
[8.70688057 38.00404739]
[-3.10087180 28.75326347]
[-14.90862370 19.50248146]
[-23.75166130 16.60326576]
[-26.92772293 9.78962898]
[-38.45068741 0.18643679]
[-49.97364807 -9.41675568]
[-61.49661255 -19.01994896]
[-77.21138763 -17.34025383]
[-89.45850372 -27.32943726]
[-90.97195435 -43.06109238]
[-80.85385132 -55.20190811]
[-65.10707092 -56.54895401]
[-53.07390594 -46.30305099]
[-51.89342117 -30.54291153]
[-40.37045670 -20.93972015]
[-28.84749413 -11.33652687]
[-17.32452965 -1.73333430]
[-5.65784073 7.69472885]
[6.14991140 16.94551277]
[17.95766258 26.19629478]
[29.76541519 35.44707870]
[41.57316971 44.69786072]
[53.38092041 53.94864273]
[65.18867493 63.19942856]
[74.65835571 56.13758087]
[85.50611115 51.46096420]
[97.14204407 49.42389297]
[108.93339539 50.13713455]
[120.23894501 53.56191254]
[130.44390869 59.51198578]
[138.99333191 67.66378784]
[151.83004761 59.90372086]
[164.66676331 52.14365387]
[177.50349426 44.38358688]
[190.34020996 36.62351990]
[203.17692566 28.86345100]
[216.01364136 21.10338402]
[221.86024475 13.86307621]
[229.35734558 13.30955601]
[242.42259216 5.94073725]
[250.29435730 -8.44561863]
[266.69317627 -8.55108356]
[274.74932861 5.73283672]
[266.17535400 19.71206856]
[249.79141235 19.00597763]
[236.72616577 26.37479591]
[223.77371216 33.94010162]
[210.93699646 41.70016861]
[198.10028076 49.46023560]
[185.26354980 57.22030258]
[172.42683411 64.98036957]
[159.59011841 72.74044037]
[146.75340271 80.50050354]
[150.22142029 93.37279510]
[150.21121216 106.70407104]
[146.72349548 119.57103729]
[139.99981689 131.08255005]
[130.50584412 140.44136047]
[118.89910126 146.99929810]
[105.98345184 150.30216980]
[105.53040314 165.29533386]
[105.07736206 180.28848267]
[104.62431335 195.28164673]
[104.17127228 210.27481079]
[114.59568787 227.39750671]
[104.12089539 243.53205872]
[104.57394409 258.52520752]
[105.02698517 273.51837158]
[105.48003387 288.51153564]
[105.93307495 303.50466919]
[114.83083344 312.99261475]
[114.80783081 325.59683228]
[106.42837524 334.46551514]
[106.42837524 349.46551514]
[106.42837524 364.46551514]
[112.47471619 380.30465698]
] def
/pairs [
[2 102]
[3 101]
[4 100]
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[14 91]
[15 90]
[16 89]
[17 88]
[18 87]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[31 44]
[32 43]
[33 42]
[34 41]
[58 80]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
