%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.2.5
%%CreationDate: Mon Oct 29 17:41:14 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d0 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GUGACUGGAGUUCAGACGUGUGCUCUUCCGAUCUAGAUCGGAAGAGCGUCGUGUAGGGAAAGAGUGUAGAUC\
) def
/coor [
[93.62074280 266.88977051]
[92.87627411 251.60237122]
[99.33200073 237.72496033]
[111.50444794 228.44648743]
[108.93505096 213.66818237]
[106.36565399 198.88989258]
[93.74097443 194.05279541]
[85.14712524 183.47489929]
[82.96312714 169.91146851]
[87.87971497 156.96627808]
[98.68624115 148.13409424]
[96.75502014 133.25894165]
[94.82379913 118.38377380]
[83.40866852 109.45959473]
[81.54316711 95.09066772]
[90.30104065 83.54744720]
[88.36981964 68.67228699]
[86.43859863 53.79712677]
[84.50737762 38.92196655]
[82.57614899 24.04680824]
[80.32531738 9.21664429]
[77.75592041 -5.56165695]
[75.18652344 -20.33995819]
[72.61712646 -35.11825943]
[70.04772949 -49.89656067]
[67.47833252 -64.67486572]
[64.90893555 -79.45316315]
[62.33954239 -94.23146820]
[59.77014542 -109.00976562]
[57.20074463 -123.78807068]
[54.63134766 -138.56637573]
[52.06195068 -153.34468079]
[41.14124680 -165.57864380]
[46.53210449 -181.06640625]
[62.68887329 -183.87547302]
[72.99085236 -171.11611938]
[66.84025574 -155.91407776]
[69.40965271 -141.13577271]
[71.97904968 -126.35746765]
[74.54844666 -111.57916260]
[77.11784363 -96.80086517]
[79.68724060 -82.02256012]
[82.25663757 -67.24426270]
[84.82603455 -52.46595764]
[87.39543152 -37.68765640]
[89.96482849 -22.90935516]
[92.53422546 -8.13105392]
[95.10362244 6.64724731]
[99.48654938 12.88663769]
[97.45130920 22.11558533]
[99.38253784 36.99074554]
[101.31375885 51.86590576]
[103.24497986 66.74106598]
[105.17620087 81.61622620]
[116.59133148 90.54040527]
[118.45683289 104.90933228]
[109.69895935 116.45255280]
[111.63018036 131.32771301]
[113.56140137 146.20286560]
[128.41804504 153.97315979]
[135.74577332 168.87017822]
[132.88993835 185.05767822]
[121.14395142 196.32049561]
[123.71334839 211.09878540]
[126.28274536 225.87709045]
[140.87257385 230.50260925]
[151.63340759 241.38668823]
[156.09246826 256.02825928]
[153.22511292 271.06277466]
[143.69023132 283.03543091]
[129.67886353 289.19497681]
[114.41072845 288.12603760]
] def
/pairs [
[4 65]
[5 64]
[6 63]
[11 59]
[12 58]
[13 57]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
