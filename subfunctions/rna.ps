%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.2.5
%%CreationDate: Mon Oct 22 20:12:45 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d0 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AUAACAUGAGGAUCACCCAUGUAUUCGAAGAUAUUAUUAGCCAUAUAUACAUGAGGAUCACCCAUGUUCC\
) def
/coor [
[88.24595642 296.79519653]
[84.88707733 281.10769653]
[95.16884613 268.79248047]
[95.16884613 253.79248047]
[95.16884613 238.79248047]
[95.16884613 223.79248047]
[95.16884613 208.79248047]
[95.16884613 193.79248047]
[87.43154144 181.06521606]
[95.16884613 167.26504517]
[94.83701324 152.26870728]
[94.17351532 137.28338623]
[93.51000977 122.29807281]
[92.84651184 107.31275177]
[89.27672577 99.77266693]
[92.50000000 91.65292358]
[84.76270294 77.85275269]
[92.50000000 65.12548065]
[92.50000000 50.12548065]
[92.50000000 35.12548065]
[92.50000000 20.12548065]
[92.50000000 5.12548161]
[92.50000000 -9.87451839]
[92.50000000 -24.87451935]
[78.29158020 -30.10386276]
[66.75123596 -39.86052704]
[59.25935364 -52.95220184]
[56.70340729 -67.78922272]
[59.37286377 -82.57758331]
[66.92653656 -95.53584290]
[78.43607330 -105.10974884]
[92.50000000 -110.15863037]
[92.50000000 -125.15863037]
[83.83629608 -139.08242798]
[91.80042267 -153.41786194]
[108.19957733 -153.41786194]
[116.16370392 -139.08242798]
[107.50000000 -125.15863037]
[107.50000000 -110.15863037]
[121.56392670 -105.10974884]
[133.07347107 -95.53584290]
[140.62713623 -82.57758331]
[143.29658508 -67.78922272]
[140.74064636 -52.95220184]
[133.24876404 -39.86052704]
[121.70841980 -30.10386276]
[107.50000000 -24.87451935]
[107.50000000 -9.87451839]
[107.50000000 5.12548161]
[107.50000000 20.12548065]
[107.50000000 35.12548065]
[107.50000000 50.12548065]
[107.50000000 65.12548065]
[115.23729706 77.85275269]
[107.50000000 91.65292358]
[107.83183289 106.64925385]
[108.49533081 121.63457489]
[109.15882874 136.61988831]
[109.82233429 151.60520935]
[113.42283630 160.35798645]
[110.16884613 167.26504517]
[117.90614319 181.06521606]
[110.16884613 193.79248047]
[110.16884613 208.79248047]
[110.16884613 223.79248047]
[110.16884613 238.79248047]
[110.16884613 253.79248047]
[110.16884613 268.79248047]
[120.45061493 281.10769653]
[117.09172821 296.79519653]
] def
/pairs [
[3 68]
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[10 61]
[11 59]
[12 58]
[13 57]
[14 56]
[16 55]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
